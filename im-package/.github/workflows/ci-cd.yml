name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend_production/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install frontend dependencies
      run: |
        cd frontend_production
        npm ci

    - name: Run backend tests
      run: |
        cd backend
        npm test || echo "No tests configured"

    - name: Run frontend build
      run: |
        cd frontend_production
        npm run build

    - name: Run ESLint
      run: |
        cd backend
        npx eslint . --ext .js || echo "ESLint not configured"
        cd ../frontend_production
        npx eslint . --ext .ts,.tsx || echo "ESLint not configured"

    - name: Run TypeScript check
      run: |
        cd frontend_production
        npx tsc --noEmit

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend_production/package-lock.json

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend_production && npm ci

    - name: Build frontend
      run: |
        cd frontend_production
        npm run build

    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp -r backend deployment-package/
        cp -r frontend_production/dist deployment-package/frontend
        cp docker-compose.yml deployment-package/
        cp docker-compose.prod.yml deployment-package/
        cp README.md deployment-package/
        cp DEPLOYMENT_GUIDE.md deployment-package/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment-package/
        retention-days: 30

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: deployment-package/

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里添加你的部署命令
        # 例如: scp, rsync, docker push 等

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: deployment-package/

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 这里添加你的生产环境部署命令

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/im-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/im-backend:${{ github.sha }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend_production
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/im-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/im-frontend:${{ github.sha }}

